{"version":3,"sources":["../keet/src/components/ternaryOps.js","../keet/src/components/templateParse/updateState.js","../keet/src/components/templateParse/valAssign.js","../keet/src/components/templateParse/replaceHandleBars.js","../keet/src/components/genModelList.js","../keet/src/components/conditionalNodes.js","../keet/src/components/componentParse.js","../keet/src/components/templateParse/replaceCommentBlock.js","../keet/src/components/templateParse/addEvent.js","../keet/src/components/templateParse/index.js","../keet/node_modules/set-dom/src/parse-html.js","../keet/node_modules/set-dom/src/index.js","../keet/src/components/parseStr.js","../keet/src/base/mount.js","../keet/src/components/strInterpreter.js","../keet/utils.js","../keet/src/components/genModelTemplate.js","../keet/src/components/genElement.js","../keet/keet.js","../src/app/util.js","../src/app/filter-model.js","../src/app/todo-model.js","../src/app/todo.js","../src/app/filter.js","../src/app/app.js"],"names":["ternaryOps","input","match","t","split","condition","leftHand","rightHand","this","value","test","state","updateState","updateStateList","valAssign","node","replace","withTo","nodeValue","replaceHandleBars","ins","templateParse","isAttr","props","re","ln","length","rep","tnr","isObjectNotation","call","strInterpreter","undefined","render","str","obj","m","genModelTemplate","documentFragment","range","createContextualFragment","firstChild","setAttribute","genModelList","model","modelList","i","listClone","parentNode","updateOfNew","diffOfOld","pNode","equalLength","child","list","oldModel","p","listArg","idx","beforeNode","f","cache","enableFiltering","nextSibling","cloneNode","outerHTML","remove","__pristineFragment__","getElementById","id","childNodes","hasOwnProperty","hasAttribute","diff","diffModel","_len","arguments","args","Array","_key","pop","querySelector","replaceChild","lastChild","map","indexOf","insertBefore","removeChild","JSON","parse","stringify","getId","checkNodeAvailability","el","bind","catchNode","start","cNode","nodeType","DOCUMENT_ELEMENT_TYPE","isEqualNode","resolveConditionalNodes","conditional","setup","currentNode","fetchFrag","frag","document","createDocumentFragment","conditionalNodesRawEnd","Object","keys","c","DOCUMENT_COMMENT_TYPE","appendChild","componentParse","componentStr","component","cacheInit","ID","base","callBatchPoolUpdate","assert","replaceCommentBlock","conditionalRep","modelRep","trim","conditionalRe","conditionalNodes","lookupParentNode","rootNode","getAttribute","addEvent","evtData","isModel","evtName","handler","addEventListener","fn","e","stopPropagation","target","currentTarget","getIndex","addEventModel","ctx","modelInstance","modelObject","type","fragment","instance","inspectAttributes","nodeAttributes","attributes","a","ns","name","localName","removeAttribute","checked","testEventNode","evtStore","obs","push","hasChildNodes","modelRaw","events","addEvt","hasAttributes","check","DOMParserParse","markup","rootName","doc","parser","parseFromString","htmlType","body","documentRootName","documentElement","fallbackParse","supportsInnerHTML","innerHTML","mockHTML","bodyMatch","bodyReg","bodyContent","startBody","index","endBody","slice","xhtmlType","mockBody","setDOM","oldNode","newNode","DOCUMENT_TYPE","DOCUMENT_FRAGMENT_TYPE","parseHTML","nodeName","NODE_MOUNTED","setNode","ELEMENT_TYPE","newPrev","dismount","setAttributes","oldAttributes","newAttributes","b","namespaceURI","getNamedItemNS","removeNamedItemNS","setNamedItemNS","setChildNodes","oldParent","newParent","checkOld","oldKey","checkNew","newKey","foundNode","keyedNodes","extra","getKey","key","KEY","KEY_PREFIX","isIgnored","getCheckSum","CHECKSUM","NaN","IGNORE","mount","dispatch","ev","createEvent","prop","initEvent","defineProperty","dispatchEvent","val","msg","Error","parseStr","stub","addState","setState","componentDidMount","_mount","tempDiv","createElement","_typeof","DOCUMENT_TEXT_TYPE","clearState","res","result","genId","rd","Math","random","toString","minId","componentName","callback","notFound","find","ele","clearInterval","found","fail","setInterval","setTimeout","html","literals","shift","substs","raw","reduce","acc","lit","join","notEqual","inform","_len2","_key2","exec","apply","createModel","enumerable","configurable","get","set","listFilter","_this","filter","subscribe","add","concat","_extends","kdata-id","update","updateObj","destroy","destroyObj","RegExp","tmpl","isTernary","len","string","arrProps","fst","sec","some","inr","predicate","attr","createRange","window","DOMParser","supportsHTMLType","testClass","testCode","parsed","d","classList","mockDoc","implementation","createHTMLDocument","module","morph","DELAY","morpher","genElement","IS_STUB","componentDidUpdate","timer","updateContext","delay","clearTimeout","nextState","stateList","isArray","inVal","l","console","log","tr","trace","Keet","indentity","link","componentWillMount","camelCase","s","charAt","toUpperCase","CreateFilterModel","switch","hash","selected","filterModel","from","page","CreateModel","clearCompleted","todo","completed","updateAll","todoModel","ENTER_KEY","ESC_KEY","App","possibleConstructorReturn","_Keet","addTodo","newTodo","evtTodo","className","filterTodo","saveEditing","title","editTodo","isEditing","currentValue","focus","blurTodo","keyTodo","which","todoList","_templateObject","_this2","location","history","pushState","_this3","updateUrl","onpopstate","filterApp","_templateObject$1","isChecked","count","plural","clearToggle","todoState","_temp","_ret","todos","uncompleted","create","keyCode","completeAll","_templateObject$2"],"mappings":"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","file":"app.js","sourcesContent":["// function to resolve ternary operation\r\n\r\nconst test = str => str === '\\'\\'' || str === '\"\"' || str === 'null' ? '' : str\r\n\r\nexport default function (input) {\r\n  if (input.match(/([^?]*)\\?([^:]*):([^;]*)|(\\s*=\\s*)[^;]*/g)) {\r\n    let t = input.split('?')\r\n    let condition = t[0]\r\n    let leftHand = t[1].split(':')[0]\r\n    let rightHand = t[1].split(':')[1]\r\n\r\n    // check the condition fulfillment\r\n\r\n    if (this) {\r\n      if (this[condition]) {\r\n        return {\r\n          value: test(leftHand),\r\n          state: condition\r\n        }\r\n      } else {\r\n        return {\r\n          value: test(rightHand),\r\n          state: condition\r\n        }\r\n      }\r\n    }\r\n    return false\r\n  } else return false\r\n}\r\n","export default function (state, updateStateList) {\r\n  if (typeof updateStateList === 'function') updateStateList(state)\r\n}\r\n","export default function (node, value, replace, withTo) {\r\n  value = value.replace(replace, withTo)\r\n  if (node) node.nodeValue = value\r\n}\r\n","import ternaryOps from '../ternaryOps'\r\nimport strInterpreter from '../strInterpreter'\r\nimport updateState from './updateState'\r\nimport valAssign from './valAssign'\r\n\r\nconst re = /{{([^{}]+)}}/g\r\n\r\nexport default function (value, node, ins, updateStateList, templateParse, isAttr) {\r\n  const props = value.match(re)\r\n  let ln = props.length\r\n  let rep\r\n  let tnr\r\n  let isObjectNotation\r\n\r\n  while (ln) {\r\n    ln--\r\n    rep = props[ln].replace(re, '$1')\r\n    tnr = ternaryOps.call(ins, rep)\r\n    isObjectNotation = strInterpreter(rep)\r\n    if (isObjectNotation) {\r\n      updateState(rep, updateStateList)\r\n      valAssign(node, value, '{{' + rep + '}}', ins[isObjectNotation[0]][isObjectNotation[1]])\r\n    } else {\r\n      if (tnr) {\r\n        updateState(tnr.state, updateStateList)\r\n        if (!isAttr) {\r\n          valAssign(node, value, '{{' + rep + '}}', tnr.value)\r\n        } else {\r\n          return tnr.value\r\n        }\r\n      } else {\r\n        if (ins[rep] !== undefined) {\r\n          updateState(rep, updateStateList)\r\n          if (!isAttr) {\r\n            valAssign(node, value, '{{' + rep + '}}', ins[rep])\r\n          } else {\r\n            return ins[rep]\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { getId, checkNodeAvailability } from '../../utils'\r\nimport genModelTemplate from './genModelTemplate'\r\n\r\n// diffing two array of objects, including object properties differences\r\nconst diff = (fst, sec) =>\r\n  fst.filter(obj =>\r\n    !sec.some(inr => {\r\n      let predicate = true\r\n      for (let attr in inr) {\r\n        if (obj[attr] !== inr[attr]) {\r\n          predicate = false\r\n        }\r\n      }\r\n      return predicate\r\n    })\r\n  )\r\n\r\n// check if browser support createRange\r\nlet range\r\n\r\nif (typeof document.createRange === 'function') {\r\n  range = document.createRange()\r\n}\r\n\r\n// storage for model state\r\nlet cache = {}\r\nlet m\r\nlet documentFragment\r\n\r\nfunction render (str, obj) {\r\n  m = genModelTemplate(str, obj)\r\n  documentFragment = range.createContextualFragment(m)\r\n  documentFragment.firstChild.setAttribute('kdata-id', obj['kdata-id'])\r\n}\r\n\r\nfunction genModelList (node, model, templateParse) {\r\n  let modelList\r\n  let i\r\n  let listClone\r\n  let parentNode\r\n  let updateOfNew\r\n  let diffOfOld\r\n  let pNode\r\n  let equalLength\r\n  let child\r\n  let list\r\n  let str\r\n  let oldModel\r\n  let p\r\n  let listArg\r\n  let idx\r\n  let beforeNode\r\n  let f\r\n\r\n  cache[model] = cache[model] || {}\r\n\r\n  // check if the model use filtering\r\n  listArg = this[model].enableFiltering ? 'listFilter' : 'list'\r\n\r\n  if (!cache[model][listArg]) {\r\n    cache[model][listArg] = node.nextSibling.cloneNode(true)\r\n  }\r\n  list = cache[model][listArg]\r\n\r\n  if (!cache[model].str) {\r\n    cache[model].str = node.nextSibling.cloneNode(true).outerHTML\r\n    // remove the first prototype node\r\n    node.nextSibling.remove()\r\n    // also remove from pristine node\r\n    p = this.__pristineFragment__.getElementById(node.parentNode.id)\r\n    if (p) p.childNodes[1].remove()\r\n  }\r\n  str = cache[model].str\r\n\r\n  if (this[model] !== undefined && this[model].hasOwnProperty(listArg)) {\r\n    parentNode = node.parentNode\r\n\r\n    if (range && !parentNode.hasAttribute('data-ignore')) {\r\n      parentNode.setAttribute('data-ignore', '')\r\n    }\r\n\r\n    modelList = this[model][listArg]\r\n\r\n    oldModel = cache[model].oldModel || []\r\n\r\n    // check if current browser doesn't support createRange()\r\n    if (!range) {\r\n      i = 0\r\n      while (i < modelList.length) {\r\n        // fallback to regular node generation handler\r\n        listClone = list.cloneNode(true)\r\n        templateParse(this, null, listClone, modelList[i], null, 'update')\r\n        listClone.setAttribute('kdata-id', modelList[i]['kdata-id'])\r\n        parentNode.insertBefore(listClone, parentNode.lastChild)\r\n        i++\r\n      }\r\n    } else {\r\n      updateOfNew = diff(modelList, oldModel)\r\n      diffOfOld = diff(oldModel, modelList)\r\n\r\n      const diffModel = function (...args) {\r\n        pNode = args.pop()\r\n        // check if both models are equally in length\r\n        equalLength = oldModel.length === modelList.length\r\n\r\n        // do properties update\r\n        if (equalLength) {\r\n          i = 0\r\n          while (i < updateOfNew.length) {\r\n            if (updateOfNew[i]['kdata-id'] === diffOfOld[i]['kdata-id']) {\r\n              // equal node element id\r\n              child = pNode.querySelector(`[kdata-id=\"${updateOfNew[i]['kdata-id']}\"]`)\r\n            } else {\r\n              // replace if it doesn't share the same id\r\n              child = pNode.querySelector(`[kdata-id=\"${diffOfOld[i]['kdata-id']}\"]`)\r\n            }\r\n            if (child) {\r\n              render(str, updateOfNew[i])\r\n              pNode.replaceChild(documentFragment, child)\r\n            }\r\n            i++\r\n          }\r\n        // add new objects\r\n        } else if (updateOfNew.length > 0 && diffOfOld.length === 0) {\r\n          i = 0\r\n          while (i < updateOfNew.length) {\r\n            render(str, updateOfNew[i])\r\n            if (updateOfNew[i]['kdata-id'] === modelList[modelList.length - 1]['kdata-id']) {\r\n              beforeNode = pNode.lastChild\r\n            } else {\r\n              idx = modelList.map(m => m['kdata-id']).indexOf(updateOfNew[i]['kdata-id'])\r\n              beforeNode = pNode.childNodes[idx].nextSibling\r\n            }\r\n            pNode.insertBefore(documentFragment, beforeNode)\r\n            i++\r\n          }\r\n        // destroy selected objects\r\n        } else if (updateOfNew.length === 0 && diffOfOld.length > 0) {\r\n          i = 0\r\n          while (i < diffOfOld.length) {\r\n            child = pNode.querySelector(`[kdata-id=\"${diffOfOld[i]['kdata-id']}\"]`)\r\n            if (child) {\r\n              pNode.removeChild(child)\r\n            }\r\n            i++\r\n          }\r\n        } else if (updateOfNew.length > 0 && diffOfOld.length > 0) {\r\n          // if both differences has length we remove the old children and replace it with the new ones\r\n          i = 0\r\n          while (i < diffOfOld.length) {\r\n            child = pNode.querySelector(`[kdata-id=\"${diffOfOld[i]['kdata-id']}\"]`)\r\n            if (child) {\r\n              pNode.removeChild(child)\r\n            }\r\n            i++\r\n            if (i === diffOfOld.length) {\r\n              f = 0\r\n              while (f < updateOfNew.length) {\r\n                render(str, updateOfNew[f])\r\n                pNode.insertBefore(documentFragment, pNode.lastChild)\r\n                f++\r\n              }\r\n            }\r\n          }\r\n        }\r\n        // replace oldModel after diffing\r\n        cache[model].oldModel = JSON.parse(JSON.stringify(modelList))\r\n      }\r\n\r\n      // check existing parentNode in the DOM\r\n      if (parentNode.hasAttribute('id')) {\r\n        pNode = getId(parentNode.id)\r\n\r\n        if (pNode) {\r\n          diffModel.call(this, null, null, pNode)\r\n        } else {\r\n          checkNodeAvailability({ el: parentNode.id }, model, diffModel.bind(this), function () {\r\n            // we cleanup cache on failed search\r\n            cache[model].oldModel = []\r\n          })\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default genModelList\r\n","const conditionalNodesRawEnd = /\\{\\{\\/([^{}]+)\\}\\}/g\r\nconst DOCUMENT_ELEMENT_TYPE = 1\r\nconst DOCUMENT_COMMENT_TYPE = 8\r\n\r\nlet cache = {}\r\n\r\n// rebuild the node structure\r\nfunction catchNode (node, start) {\r\n  let cNode\r\n  while (node) {\r\n    cNode = node\r\n    node = node.nextSibling\r\n    if (cNode && cNode.nodeType === DOCUMENT_ELEMENT_TYPE) {\r\n      if (cNode.isEqualNode(start)) {\r\n        cNode.remove()\r\n        start = start.nextSibling\r\n      } else {\r\n        catchNode(cNode.firstChild, start)\r\n      }\r\n    } else if (cNode.isEqualNode(start)) {\r\n      cNode.remove()\r\n      start = start.nextSibling\r\n    }\r\n  }\r\n}\r\n\r\nfunction resolveConditionalNodes (node, updateStateList, conditional, templateParse, setup) {\r\n  let currentNode\r\n  let cNode\r\n  let fetchFrag\r\n  let frag = document.createDocumentFragment()\r\n\r\n  if (setup === 'initial' && !cache.hasOwnProperty(conditional)) {\r\n    cNode = node\r\n    while (cNode) {\r\n      currentNode = cNode\r\n      cNode = cNode.nextSibling\r\n      if (currentNode.nodeType !== DOCUMENT_ELEMENT_TYPE && currentNode.nodeValue.match(conditionalNodesRawEnd)) {\r\n        cache[conditional] = cache[conditional] || {}\r\n\r\n        // clean up pristine node\r\n        catchNode(this.__pristineFragment__.firstChild, frag.firstChild)\r\n        // also clean up cache for recursive handlers\r\n        Object.keys(cache).map(c =>\r\n          c !== conditional && catchNode(cache[c].frag.firstChild, frag.firstChild)\r\n        )\r\n\r\n        cache[conditional].frag = frag\r\n        fetchFrag = cache[conditional].frag.cloneNode(true)\r\n\r\n        // resolve recursive conditional handlers as well\r\n        templateParse(this, null, null, null, fetchFrag, 'initial')\r\n\r\n        // update current if conditional is truthy\r\n        if (this[conditional]) {\r\n          currentNode.parentNode.insertBefore(fetchFrag, currentNode)\r\n        }\r\n      } else if (currentNode.nodeType !== DOCUMENT_COMMENT_TYPE) {\r\n        frag.appendChild(currentNode)\r\n      }\r\n    }\r\n  } else {\r\n    if (node.nextSibling.isEqualNode(cache[conditional].frag.firstChild)) return\r\n    fetchFrag = cache[conditional].frag.cloneNode(true)\r\n    if (this[conditional]) {\r\n      node.parentNode.insertBefore(fetchFrag, node.nextSibling)\r\n    } else {\r\n      templateParse(this, null, null, null, fetchFrag, 'update')\r\n    }\r\n  }\r\n}\r\n\r\nexport default resolveConditionalNodes\r\n","import { assert, getId } from '../../utils'\r\n\r\nlet cacheInit = {}\r\n\r\nexport default function (componentStr, node) {\r\n  const component = componentStr.replace('component:', '')\r\n  const c = this[component]\r\n\r\n  if (c !== undefined) {\r\n    // this is for initial component runner\r\n    if (!cacheInit[c.ID]) {\r\n      c.render(true)\r\n      cacheInit[c.ID] = c.base.cloneNode(true)\r\n      node.parentNode.replaceChild(c.base, node)\r\n    } else {\r\n      // we need to reattach event listeners if the node is not available on DOM\r\n      if (!getId(this[component].el)) {\r\n        c.base = c.__pristineFragment__.cloneNode(true)\r\n        c.render(true)\r\n        node.parentNode.replaceChild(c.base, node)\r\n      } else {\r\n        node.parentNode.replaceChild(cacheInit[c.ID].cloneNode(true), node)\r\n      }\r\n    }\r\n    // inform sub-component to update\r\n    c.callBatchPoolUpdate()\r\n  } else {\r\n    assert(false, 'Component ' + component + ' does not exist.')\r\n  }\r\n}\r\n","import genModelList from '../genModelList'\r\nimport conditionalNodes from '../conditionalNodes'\r\nimport updateState from './updateState'\r\nimport componentParse from '../componentParse'\r\n\r\nconst re = /{{([^{}]+)}}/g\r\nconst model = /^model:/g\r\nconst conditionalRe = /^\\?/g\r\nconst component = /^component:([^{}]+)/g\r\n\r\nexport default function (value, node, ins, updateStateList, templateParse, setup) {\r\n  let conditionalRep\r\n  let rep\r\n  let modelRep\r\n\r\n  if (value.match(re)) {\r\n    rep = value.replace(re, '$1').trim()\r\n    if (rep.match(model) && setup !== 'initial') {\r\n      modelRep = rep.replace('model:', '')\r\n      genModelList.call(this, node, modelRep, templateParse)\r\n    } else if (rep.match(conditionalRe)) {\r\n      conditionalRep = rep.replace('?', '')\r\n      if (ins[conditionalRep] !== undefined) {\r\n        updateState(conditionalRep, updateStateList)\r\n        conditionalNodes.call(this, node, updateStateList, conditionalRep, templateParse, setup)\r\n      }\r\n    } else if (rep.match(component) && setup !== 'initial') {\r\n      componentParse.call(this, rep, node)\r\n    }\r\n  }\r\n}\r\n","const DOCUMENT_ELEMENT_TYPE = 1\r\nconst re = /{{([^{}]+)}}/g\r\n\r\nfunction lookupParentNode (rootNode, node) {\r\n  let cNode\r\n  while (node) {\r\n    cNode = node\r\n    node = node.parentNode\r\n    if (cNode.nodeType === DOCUMENT_ELEMENT_TYPE && cNode.hasAttribute('kdata-id')) {\r\n      return { id: cNode.getAttribute('kdata-id'), node: cNode }\r\n    }\r\n    if (cNode.isEqualNode(rootNode)) {\r\n      node = null\r\n    }\r\n  }\r\n}\r\n\r\nconst getIndex = (id, model) => model.list.map(m => m['kdata-id']).indexOf(id)\r\n\r\nfunction addEvent (node, evtData) {\r\n  delete evtData.isModel\r\n  let evtName = Object.keys(evtData)[0]\r\n  let handler = evtData[evtName]\r\n  if (this[handler] !== undefined && typeof this[handler] === 'function') {\r\n    node.addEventListener(evtName, this[handler].bind(this), evtData['useCapture'] ? true : false)\r\n  }\r\n}\r\n\r\nfunction fn(model, handler, node, e) {\r\n  e.stopPropagation()\r\n  if (e.target !== e.currentTarget) {\r\n    let t = lookupParentNode(node, e.target)\r\n    this[handler](model.list[getIndex(t.id, model)], e.target, t.node, e)\r\n  }\r\n}\r\n\r\nfunction addEventModel (node, evtData) {\r\n  delete evtData.isModel\r\n  let evtName = Object.keys(evtData)[0]\r\n  let handler = evtData[evtName]\r\n  if (this[handler] !== undefined && typeof this[handler] === 'function') {\r\n    let rep = node.firstChild.nodeValue.replace(re, '$1').trim()\r\n    rep = rep.replace('model:', '')\r\n    let model = this[rep]\r\n    node.addEventListener(evtName, fn.bind(this, model, handler, node), evtData['useCapture'] ? true : false)\r\n  }\r\n}\r\n\r\nexport {\r\n  addEvent,\r\n  addEventModel\r\n}\r\n","import replaceHandleBars from './replaceHandleBars'\r\nimport replaceCommentBlock from './replaceCommentBlock'\r\nimport { addEvent, addEventModel } from './addEvent'\r\nimport { getId } from '../../../utils'\r\n\r\nconst DOCUMENT_ELEMENT_TYPE = 1\r\nconst DOCUMENT_COMMENT_TYPE = 8\r\nconst re = /{{([^{}]+)}}/g\r\nconst modelRaw = /\\{\\{model:([^{}]+)\\}\\}/g\r\n\r\nfunction templateParse (ctx, updateStateList, modelInstance, modelObject, conditional, type) {\r\n  let currentNode\r\n  let fragment\r\n  let instance\r\n\r\n  if (modelObject) {\r\n    instance = modelInstance\r\n  } else if (conditional) {\r\n    instance = conditional.firstChild\r\n  } else {\r\n    fragment = ctx.base\r\n    instance = fragment.firstChild\r\n  }\r\n\r\n  let ins = modelObject || ctx\r\n\r\n  const inspectAttributes = node => {\r\n    let nodeAttributes = node.attributes\r\n    let i = 0\r\n    let a\r\n    let ns\r\n    let name\r\n\r\n    for (i = nodeAttributes.length; i--;) {\r\n      a = nodeAttributes[i]\r\n      name = a.localName\r\n      ns = a.nodeValue\r\n      if (re.test(name)) {\r\n        node.removeAttribute(name)\r\n        name = replaceHandleBars(name, node, ins, null, null, true)\r\n        node.setAttribute(name, ns)\r\n      } else if (re.test(ns)) {\r\n        ns = replaceHandleBars(ns, node, ins, null, null, true)\r\n        if (name === 'checked') {\r\n          if (ns === '') {\r\n            node.checked = false\r\n          } else {\r\n            node.checked = true\r\n          }\r\n          node.removeAttribute(name)\r\n        } else {\r\n          if (ns === '') {\r\n            node.setAttribute(name, '')\r\n          } else {\r\n            node.setAttribute(name, ns)\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  const testEventNode = node => {\r\n    let nodeAttributes = node.attributes\r\n    let i = 0\r\n    let a\r\n    let name\r\n    let value\r\n    let evtName\r\n    let handler\r\n    let evtStore = []\r\n    let obs\r\n    let args\r\n\r\n    while (i < nodeAttributes.length) {\r\n      a = nodeAttributes[i]\r\n      name = a.localName\r\n      value = a.nodeValue\r\n      if (/^k-/.test(name)) {\r\n        evtName = name.replace(/^k-/, '')\r\n        handler = value.match(/[a-zA-Z]+(?![^(]*\\))/)[0]\r\n        args = value.match(/\\(([^{}]+)\\)/)\r\n        args = args ? args[1] : ''\r\n        obs = {}\r\n        obs[evtName] = handler\r\n        if (args) obs[args] = true\r\n        obs['isModel'] = false\r\n        evtStore.push(obs)\r\n        if (node.hasChildNodes() && node.firstChild.nodeType !== DOCUMENT_ELEMENT_TYPE && node.firstChild.nodeValue.match(modelRaw)) {\r\n          obs['isModel'] = true\r\n        }\r\n      }\r\n      i++\r\n    }\r\n    return evtStore\r\n  }\r\n\r\n  let events\r\n\r\n  const addEvt = (node, type) => {\r\n    while (node) {\r\n      currentNode = node\r\n      node = node.nextSibling\r\n      if (currentNode.nodeType === DOCUMENT_ELEMENT_TYPE) {\r\n        if (currentNode.hasAttributes() && !getId(currentNode.id)) {\r\n          events = testEventNode(currentNode)\r\n          if (events.length) {\r\n            events.map(e =>\r\n              !e.isModel ? addEvent.call(ctx, currentNode, e) : addEventModel.call(ctx, currentNode, e)\r\n            )\r\n          }\r\n        }\r\n        addEvt(currentNode.firstChild, type)\r\n      }\r\n    }\r\n  }\r\n\r\n  const check = (node, type) => {\r\n    while (node) {\r\n      currentNode = node\r\n      node = node.nextSibling\r\n      if (currentNode.nodeType === DOCUMENT_ELEMENT_TYPE) {\r\n        if (type === 'update' && currentNode.hasAttributes()) {\r\n          inspectAttributes(currentNode)\r\n        }\r\n        check(currentNode.firstChild, type)\r\n      } else if (currentNode.nodeValue.match(re)) {\r\n        if (currentNode.nodeType === DOCUMENT_COMMENT_TYPE) {\r\n          replaceCommentBlock.call(ctx, currentNode.nodeValue, currentNode, ins, updateStateList, templateParse, type)\r\n        } else if (type === 'update') {\r\n          replaceHandleBars.call(ctx, currentNode.nodeValue, currentNode, ins, updateStateList, templateParse)\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  if (type === 'initial' || type === 'update') {\r\n    check(instance, type)\r\n  } else if (type === 'event') {\r\n    addEvt(instance, type)\r\n  }\r\n}\r\n\r\nexport default templateParse\r\n","'use strict'\r\nvar parser = window.DOMParser && new window.DOMParser()\r\nvar documentRootName = 'HTML'\r\nvar supportsHTMLType = false\r\nvar supportsInnerHTML = false\r\nvar htmlType = 'text/html'\r\nvar xhtmlType = 'application/xhtml+xml'\r\nvar testClass = 'A'\r\nvar testCode = '<wbr class=\"' + testClass + '\"/>'\r\n\r\ntry {\r\n  // Check if browser supports text/html DOMParser\r\n  var parsed = parser.parseFromString(testCode, htmlType).body.firstChild\r\n  // Some browsers (iOS 9 and Safari 9) lowercase classes for parsed elements\r\n  // but only when appending to DOM, so use innerHTML instead\r\n  var d = document.createElement('div')\r\n  d.appendChild(parsed)\r\n  if (d.firstChild.classList[0] !== testClass) throw new Error()\r\n  supportsHTMLType = true\r\n} catch (e) {}\r\n\r\nvar mockDoc = document.implementation.createHTMLDocument('')\r\nvar mockHTML = mockDoc.documentElement\r\nvar mockBody = mockDoc.body\r\ntry {\r\n  // Check if browser supports documentElement.innerHTML\r\n  mockHTML.innerHTML += ''\r\n  supportsInnerHTML = true\r\n} catch (e) {\r\n  // Check if browser supports xhtml parsing.\r\n  parser.parseFromString(testCode, xhtmlType)\r\n  var bodyReg = /(<body[^>]*>)([\\s\\S]*)<\\/body>/\r\n}\r\n\r\nfunction DOMParserParse (markup, rootName) {\r\n  var doc = parser.parseFromString(markup, htmlType)\r\n  // Patch for iOS UIWebView not always returning doc.body synchronously\r\n  if (!doc.body) { return fallbackParse(markup, rootName) }\r\n\r\n  return rootName === documentRootName\r\n    ? doc.documentElement\r\n    : doc.body.firstChild\r\n}\r\n\r\nfunction fallbackParse (markup, rootName) {\r\n  // Fallback to innerHTML for other older browsers.\r\n  if (rootName === documentRootName) {\r\n    if (supportsInnerHTML) {\r\n      mockHTML.innerHTML = markup\r\n      return mockHTML\r\n    } else {\r\n      // IE9 does not support innerhtml at root level.\r\n      // We get around this by parsing everything except the body as xhtml.\r\n      var bodyMatch = markup.match(bodyReg)\r\n      if (bodyMatch) {\r\n        var bodyContent = bodyMatch[2]\r\n        var startBody = bodyMatch.index + bodyMatch[1].length\r\n        var endBody = startBody + bodyContent.length\r\n        markup = markup.slice(0, startBody) + markup.slice(endBody)\r\n        mockBody.innerHTML = bodyContent\r\n      }\r\n\r\n      var doc = parser.parseFromString(markup, xhtmlType)\r\n      var body = doc.body\r\n      while (mockBody.firstChild) body.appendChild(mockBody.firstChild)\r\n      return doc.documentElement\r\n    }\r\n  } else {\r\n    mockBody.innerHTML = markup\r\n    return mockBody.firstChild\r\n  }\r\n}\r\n\r\n/**\r\n * Returns the results of a DOMParser as an HTMLElement.\r\n * (Shims for older browsers).\r\n */\r\nmodule.exports = supportsHTMLType\r\n  ? DOMParserParse\r\n  : fallbackParse\r\n","'use strict'\r\n\r\nsetDOM.KEY = 'data-key'\r\nsetDOM.IGNORE = 'data-ignore'\r\nsetDOM.CHECKSUM = 'data-checksum'\r\nvar parseHTML = require('./parse-html')\r\nvar KEY_PREFIX = '_set-dom-'\r\nvar NODE_MOUNTED = KEY_PREFIX + 'mounted'\r\nvar ELEMENT_TYPE = 1\r\nvar DOCUMENT_TYPE = 9\r\nvar DOCUMENT_FRAGMENT_TYPE = 11\r\n\r\n// Expose api.\r\nmodule.exports = setDOM\r\n\r\n/**\r\n * @description\r\n * Updates existing dom to match a new dom.\r\n *\r\n * @param {Node} oldNode - The html entity to update.\r\n * @param {String|Node} newNode - The updated html(entity).\r\n */\r\nfunction setDOM (oldNode, newNode) {\r\n  // Ensure a realish dom node is provided.\r\n  assert(oldNode && oldNode.nodeType, 'You must provide a valid node to update.')\r\n\r\n  // Alias document element with document.\r\n  if (oldNode.nodeType === DOCUMENT_TYPE) oldNode = oldNode.documentElement\r\n\r\n  // Document Fragments don't have attributes, so no need to look at checksums, ignored, attributes, or node replacement.\r\n  if (newNode.nodeType === DOCUMENT_FRAGMENT_TYPE) {\r\n    // Simply update all children (and subchildren).\r\n    setChildNodes(oldNode, newNode)\r\n  } else {\r\n    // Otherwise we diff the entire old node.\r\n    setNode(oldNode, typeof newNode === 'string'\r\n      // If a string was provided we will parse it as dom.\r\n      ? parseHTML(newNode, oldNode.nodeName)\r\n      : newNode\r\n    )\r\n  }\r\n\r\n  // Trigger mount events on initial set.\r\n  if (!oldNode[NODE_MOUNTED]) {\r\n    oldNode[NODE_MOUNTED] = true\r\n    mount(oldNode)\r\n  }\r\n}\r\n\r\n/**\r\n * @private\r\n * @description\r\n * Updates a specific htmlNode and does whatever it takes to convert it to another one.\r\n *\r\n * @param {Node} oldNode - The previous HTMLNode.\r\n * @param {Node} newNode - The updated HTMLNode.\r\n */\r\nfunction setNode (oldNode, newNode) {\r\n  if (oldNode.nodeType === newNode.nodeType) {\r\n    // Handle regular element node updates.\r\n    if (oldNode.nodeType === ELEMENT_TYPE) {\r\n      // If nodeName is INPUT diff the the checked value since it's might not available as localName\r\n      if (oldNode.nodeName === 'INPUT' && oldNode.checked !== newNode.checked) {\r\n        oldNode.checked =  newNode.checked\r\n      }\r\n      // Checks if nodes are equal before diffing.\r\n      if (isEqualNode(oldNode, newNode)) return\r\n\r\n      // Update all children (and subchildren).\r\n      setChildNodes(oldNode, newNode)\r\n\r\n      // Update the elements attributes / tagName.\r\n      if (oldNode.nodeName === newNode.nodeName) {\r\n        // If we have the same nodename then we can directly update the attributes.\r\n        setAttributes(oldNode.attributes, newNode.attributes)\r\n      } else {\r\n        // Otherwise clone the new node to use as the existing node.\r\n        var newPrev = newNode.cloneNode()\r\n        // Copy over all existing children from the original node.\r\n        while (oldNode.firstChild) newPrev.appendChild(oldNode.firstChild)\r\n        // Replace the original node with the new one with the right tag.\r\n        oldNode.parentNode.replaceChild(newPrev, oldNode)\r\n      }\r\n    } else {\r\n      // Handle other types of node updates (text/comments/etc).\r\n      // If both are the same type of node we can update directly.\r\n      if (oldNode.nodeValue !== newNode.nodeValue) {\r\n        oldNode.nodeValue = newNode.nodeValue\r\n      }\r\n    }\r\n  } else {\r\n    // we have to replace the node.\r\n    oldNode.parentNode.replaceChild(newNode, dismount(oldNode))\r\n    mount(newNode)\r\n  }\r\n}\r\n\r\n/**\r\n * @private\r\n * @description\r\n * Utility that will update one list of attributes to match another.\r\n *\r\n * @param {NamedNodeMap} oldAttributes - The previous attributes.\r\n * @param {NamedNodeMap} newAttributes - The updated attributes.\r\n */\r\nfunction setAttributes (oldAttributes, newAttributes) {\r\n  var i, a, b, ns, name\r\n\r\n  // Remove old attributes.\r\n  for (i = oldAttributes.length; i--;) {\r\n    a = oldAttributes[i]\r\n    ns = a.namespaceURI\r\n    name = a.localName\r\n    b = newAttributes.getNamedItemNS(ns, name)\r\n    if (!b) oldAttributes.removeNamedItemNS(ns, name)\r\n  }\r\n\r\n  // Set new attributes.\r\n  for (i = newAttributes.length; i--;) {\r\n    a = newAttributes[i]\r\n    ns = a.namespaceURI\r\n    name = a.localName\r\n    b = oldAttributes.getNamedItemNS(ns, name)\r\n    if (!b) {\r\n      // Add a new attribute.\r\n      newAttributes.removeNamedItemNS(ns, name)\r\n      oldAttributes.setNamedItemNS(a)\r\n    } else if (b.value !== a.value) {\r\n      // Update existing attribute.\r\n      b.value = a.value\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @private\r\n * @description\r\n * Utility that will nodes childern to match another nodes children.\r\n *\r\n * @param {Node} oldParent - The existing parent node.\r\n * @param {Node} newParent - The new parent node.\r\n */\r\nfunction setChildNodes (oldParent, newParent) {\r\n  var checkOld, oldKey, checkNew, newKey, foundNode, keyedNodes\r\n  var oldNode = oldParent.firstChild\r\n  var newNode = newParent.firstChild\r\n  var extra = 0\r\n\r\n  // Extract keyed nodes from previous children and keep track of total count.\r\n  while (oldNode) {\r\n    extra++\r\n    checkOld = oldNode\r\n    oldKey = getKey(checkOld)\r\n    oldNode = oldNode.nextSibling\r\n\r\n    if (oldKey) {\r\n      if (!keyedNodes) keyedNodes = {}\r\n      keyedNodes[oldKey] = checkOld\r\n    }\r\n  }\r\n\r\n  // Loop over new nodes and perform updates.\r\n  oldNode = oldParent.firstChild\r\n  while (newNode) {\r\n    extra--\r\n    checkNew = newNode\r\n    newNode = newNode.nextSibling\r\n\r\n    if (keyedNodes && (newKey = getKey(checkNew)) && (foundNode = keyedNodes[newKey])) {\r\n      delete keyedNodes[newKey]\r\n      // If we have a key and it existed before we move the previous node to the new position if needed and diff it.\r\n      if (foundNode !== oldNode) {\r\n        oldParent.insertBefore(foundNode, oldNode)\r\n      } else {\r\n        oldNode = oldNode.nextSibling\r\n      }\r\n\r\n      setNode(foundNode, checkNew)\r\n    } else if (oldNode) {\r\n      checkOld = oldNode\r\n      oldNode = oldNode.nextSibling\r\n      if (getKey(checkOld)) {\r\n        // If the old child had a key we skip over it until the end.\r\n        oldParent.insertBefore(checkNew, checkOld)\r\n        mount(checkNew)\r\n      } else {\r\n        // Otherwise we diff the two non-keyed nodes.\r\n        setNode(checkOld, checkNew)\r\n      }\r\n    } else {\r\n      // Finally if there was no old node we add the new node.\r\n      oldParent.appendChild(checkNew)\r\n      mount(checkNew)\r\n    }\r\n  }\r\n\r\n  // Remove old keyed nodes.\r\n  for (oldKey in keyedNodes) {\r\n    extra--\r\n    oldParent.removeChild(dismount(keyedNodes[oldKey]))\r\n  }\r\n\r\n  // If we have any remaining unkeyed nodes remove them from the end.\r\n  while (--extra >= 0) {\r\n    oldParent.removeChild(dismount(oldParent.lastChild))\r\n  }\r\n}\r\n\r\n/**\r\n * @private\r\n * @description\r\n * Utility to try to pull a key out of an element.\r\n * Uses 'data-key' if possible and falls back to 'id'.\r\n *\r\n * @param {Node} node - The node to get the key for.\r\n * @return {string|void}\r\n */\r\nfunction getKey (node) {\r\n  if (node.nodeType !== ELEMENT_TYPE) return\r\n  var key = node.getAttribute(setDOM.KEY) || node.id\r\n  if (key) return KEY_PREFIX + key\r\n}\r\n\r\n/**\r\n * Checks if nodes are equal using the following by checking if\r\n * they are both ignored, have the same checksum, or have the\r\n * same contents.\r\n *\r\n * @param {Node} a - One of the nodes to compare.\r\n * @param {Node} b - Another node to compare.\r\n */\r\nfunction isEqualNode (a, b) {\r\n  return (\r\n    // Check if both nodes are ignored.\r\n    (isIgnored(a) && isIgnored(b)) ||\r\n    // Check if both nodes have the same checksum.\r\n    (getCheckSum(a) === getCheckSum(b)) ||\r\n    // Fall back to native isEqualNode check.\r\n    a.isEqualNode(b)\r\n  )\r\n}\r\n\r\n/**\r\n * @private\r\n * @description\r\n * Utility to try to pull a checksum attribute from an element.\r\n * Uses 'data-checksum' or user specified checksum property.\r\n *\r\n * @param {Node} node - The node to get the checksum for.\r\n * @return {string|NaN}\r\n */\r\nfunction getCheckSum (node) {\r\n  return node.getAttribute(setDOM.CHECKSUM) || NaN\r\n}\r\n\r\n/**\r\n * @private\r\n * @description\r\n * Utility to try to check if an element should be ignored by the algorithm.\r\n * Uses 'data-ignore' or user specified ignore property.\r\n *\r\n * @param {Node} node - The node to check if it should be ignored.\r\n * @return {boolean}\r\n */\r\nfunction isIgnored (node) {\r\n  return node.getAttribute(setDOM.IGNORE) != null\r\n}\r\n\r\n/**\r\n * Dispatches a mount event for the given node and children.\r\n *\r\n * @param {Node} node - the node to mount.\r\n * @return {node}\r\n */\r\nfunction mount (node) {\r\n  return dispatch(node, 'mount')\r\n}\r\n\r\n/**\r\n * Dispatches a dismount event for the given node and children.\r\n *\r\n * @param {Node} node - the node to dismount.\r\n * @return {node}\r\n */\r\nfunction dismount (node) {\r\n  return dispatch(node, 'dismount')\r\n}\r\n\r\n/**\r\n * Recursively trigger an event for a node and it's children.\r\n * Only emits events for keyed nodes.\r\n *\r\n * @param {Node} node - the initial node.\r\n * @return {Node}\r\n */\r\nfunction dispatch (node, type) {\r\n  // Trigger event for this element if it has a key.\r\n  if (getKey(node)) {\r\n    var ev = document.createEvent('Event')\r\n    var prop = { value: node }\r\n    ev.initEvent(type, false, false)\r\n    Object.defineProperty(ev, 'target', prop)\r\n    Object.defineProperty(ev, 'srcElement', prop)\r\n    node.dispatchEvent(ev)\r\n  }\r\n\r\n  // Dispatch to all children.\r\n  var child = node.firstChild\r\n  while (child) child = dispatch(child, type).nextSibling\r\n  return node\r\n}\r\n\r\n/**\r\n * @private\r\n * @description\r\n * Confirm that a value is truthy, throws an error message otherwise.\r\n *\r\n * @param {*} val - the val to test.\r\n * @param {string} msg - the error message on failure.\r\n * @throws {Error}\r\n */\r\nfunction assert (val, msg) {\r\n  if (!val) throw new Error('set-dom: ' + msg)\r\n}\r\n","import templateParse from './templateParse/index'\r\nimport { setState, addState } from './genElement'\r\nimport { getId, assert } from '../../utils'\r\n\r\nconst DOCUMENT_ELEMENT_TYPE = 1\r\n\r\nexport default function (stub) {\r\n  templateParse(this, addState, null, null, null, 'initial')\r\n  templateParse(this, addState, null, null, null, 'update')\r\n  templateParse(this, addState, null, null, null, 'event')\r\n  const el = stub || getId(this.el)\r\n  if (el) {\r\n    if (el.nodeType === DOCUMENT_ELEMENT_TYPE) {\r\n      el.setAttribute('data-ignore', '')\r\n    } else {\r\n      assert(this.base.childNodes.length === 1, 'Sub-component should only has a single rootNode.')\r\n      !this.base.firstChild.hasAttribute('data-ignore') && this.base.firstChild.setAttribute('data-ignore', '')\r\n    }\r\n    // listen to state changes\r\n    setState.call(this)\r\n    // mount fragment to DOM\r\n    if (!stub) {\r\n      el.appendChild(this.base)\r\n    }\r\n\r\n    // since component already rendered, trigger its life-cycle method\r\n    if (this.componentDidMount && typeof this.componentDidMount === 'function') {\r\n      this.componentDidMount()\r\n    }\r\n  } else {\r\n    assert(false, 'No element with id: \"' + this.el + '\" exist.')\r\n  }\r\n}\r\n","import { clearState } from '../components/genElement'\r\nimport { assert } from '../../utils'\r\n\r\nconst DOCUMENT_FRAGMENT_TYPE = 11\r\nconst DOCUMENT_TEXT_TYPE = 3\r\nconst DOCUMENT_ELEMENT_TYPE = 1\r\n/**\r\n * @private\r\n * @description\r\n * Mount an instance of string or html elements\r\n *\r\n * @param {String|Object} instance - the html/string\r\n */\r\nexport default function (instance) {\r\n  let base\r\n  let tempDiv\r\n  let frag = document.createDocumentFragment()\r\n  // Before we begin to parse an instance, do a run-down checks\r\n  // to clean up back-tick string which usually has line spacing.\r\n  if (typeof instance === 'string') {\r\n    base = instance.trim().replace(/\\s+/g, ' ')\r\n    tempDiv = document.createElement('div')\r\n    tempDiv.innerHTML = base\r\n    while (tempDiv.firstChild) {\r\n      frag.appendChild(tempDiv.firstChild)\r\n    }\r\n  // If instance is a html element process as html entities\r\n  } else if (typeof instance === 'object' && instance['nodeType']) {\r\n    if (instance['nodeType'] === DOCUMENT_ELEMENT_TYPE) {\r\n      frag.appendChild(instance)\r\n    } else if (instance['nodeType'] === DOCUMENT_FRAGMENT_TYPE) {\r\n      frag = instance\r\n    } else if (instance['nodeType'] === DOCUMENT_TEXT_TYPE) {\r\n      frag.appendChild(instance)\r\n    } else {\r\n      assert(false, 'Unable to parse instance, unknown type.')\r\n    }\r\n  } else {\r\n    assert(false, 'Parameter is not a string or a html element.')\r\n  }\r\n  // we store the pristine instance in __pristineFragment__\r\n  this.__pristineFragment__ = frag.cloneNode(true)\r\n  this.base = frag\r\n\r\n  // cleanup states on mount\r\n  clearState()\r\n  return this\r\n}\r\n","export default (str) => {\r\n  let res = str.match(/\\.*\\./g)\r\n  let result\r\n  if (res && res.length > 0) {\r\n    return str.split('.')\r\n  }\r\n  return result\r\n}\r\n","const genId = () => {\r\n  const rd = () => (Math.random() * 1 * 1e17).toString(36)\r\n  return `KDATA-${rd()}-${rd()}`\r\n}\r\n\r\nconst minId = () => (Math.random() * 1 * 1e17).toString(36)\r\n\r\nconst getId = id => document.getElementById(id)\r\n\r\n/**\r\n * @private\r\n * @description\r\n * Check a node availability in 100ms, if not found silenty skip the event\r\n * or execute a callback\r\n *\r\n * @param {string} id - the node id\r\n * @param {function} callback - the function to execute on success\r\n * @param {function} notFound - the function to execute on failed\r\n */\r\nconst checkNodeAvailability = (component, componentName, callback, notFound) => {\r\n  let ele = getId(component.el)\r\n  let found = false\r\n  let t\r\n  function find () {\r\n    ele = getId(component.el)\r\n    if (ele) {\r\n      clearInterval(t)\r\n      found = true\r\n      callback(component, componentName, ele)\r\n    }\r\n  }\r\n  function fail () {\r\n    clearInterval(t)\r\n    if (!found && notFound && typeof notFound === 'function') notFound()\r\n  }\r\n  if (ele) return ele\r\n  else {\r\n    t = setInterval(find, 0)\r\n    // ignore finding the node after sometimes\r\n    setTimeout(fail, 5)\r\n  }\r\n}\r\n\r\n/**\r\n * @private\r\n * @description\r\n * Confirm that a value is truthy, throws an error message otherwise.\r\n *\r\n * @param {*} val - the val to test.\r\n * @param {string} msg - the error message on failure.\r\n * @throws {Error}\r\n */\r\nconst assert = (val, msg) => {\r\n  if (!val) throw new Error('(keet) ' + msg)\r\n}\r\n\r\n/**\r\n * @private\r\n * @description\r\n * Simple html template literals MODIFIED from : http://2ality.com/2015/01/template-strings-html.html\r\n * by Dr. Axel Rauschmayer\r\n * no checking for wrapping in root element\r\n * no strict checking\r\n * remove spacing / indentation\r\n * keep all spacing within html tags\r\n * include handling ${} in the literals\r\n */\r\nconst html = (...args) => {\r\n  const literals = args.shift()\r\n  const substs = args.slice()\r\n\r\n  let result = literals.raw.reduce((acc, lit, i) => acc + substs[i - 1] + lit)\r\n  // remove spacing, indentation from every line\r\n  result = result.split(/\\n+/)\r\n  result = result.map(t => t.trim()).join('')\r\n  return result\r\n}\r\n\r\nconst notEqual = function (a, b) {\r\n  return a['kdata-id'] !== b['kdata-id']\r\n}\r\n\r\nconst inform = function (...args) {\r\n  this.exec && typeof this.exec === 'function' && this.exec.apply(null, args)\r\n}\r\n\r\n/**\r\n * @private\r\n * @description\r\n * Copy with modification from preact-todomvc. Model constructor with\r\n * registering callback listener in Object.defineProperty. Any modification\r\n * to ```this.list``` instance will subsequently inform all registered listener.\r\n *\r\n * {{model:<myModel>}}<myModelTemplateString>{{/model:<myModel>}}\r\n *\r\n */\r\nclass createModel {\r\n  constructor (enableFiltering) {\r\n    // if enableFiltering is assigned a value, model generation will\r\n    // use `listFilter` instead of `list`\r\n    this.enableFiltering = enableFiltering || null\r\n\r\n    this.exec = null\r\n\r\n    this.model = []\r\n\r\n    // Register callback listener of any changes\r\n    Object.defineProperty(this, 'list', {\r\n      enumerable: false,\r\n      configurable: true,\r\n      get: function () {\r\n        return this.model\r\n      },\r\n      set: function (val) {\r\n        this.model = val\r\n        inform.call(this, this.model, this.listFilter)\r\n      }\r\n    })\r\n\r\n    // Register callback listener of any changes with filter\r\n    Object.defineProperty(this, 'listFilter', {\r\n      enumerable: false,\r\n      configurable: true,\r\n      get: function () {\r\n        return !this.prop ? this.model : this.model.filter(obj => obj[this.prop] === this.value)\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @description\r\n   * Subscribe to the model changes (add/update/destroy)\r\n   *\r\n   * @param {Object} model - the model including all prototypes\r\n   *\r\n   */\r\n  subscribe (fn) {\r\n    this.exec = fn\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @description\r\n   * Add new object to the model list\r\n   *\r\n   * @param {Object} obj - new object to add into the model list\r\n   *\r\n   */\r\n  add (obj) {\r\n    this.list = this.list.concat({ ...obj, 'kdata-id': minId() })\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @description\r\n   * Update existing object in the model list\r\n   *\r\n   * @param {String} lookupId - lookup id property name of the object\r\n   * @param {Object} updateObj - the updated properties\r\n   *\r\n   */\r\n  update (updateObj) {\r\n    this.list = this.list.map(obj =>\r\n      notEqual(obj, updateObj) ? obj : updateObj\r\n    )\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @description\r\n   * Filter the model data by selected properties, constructor\r\n   * instantiation should be apply with boolean true as argument\r\n   * to enable filtering\r\n   * @param {String} prop - property of the object\r\n   * @param {String|Boolean|Interger} value - property value\r\n   *\r\n   */\r\n  filter (prop, value) {\r\n    this.prop = prop\r\n    this.value = value\r\n    this.list = this.list.map(obj => obj)\r\n  }\r\n\r\n  /**\r\n * @private\r\n * @description\r\n * Removed existing object in the model list\r\n *\r\n * @param {String} lookupId - lookup id property name of the object\r\n * @param {String} objId - unique identifier of the lookup id\r\n *\r\n */\r\n  destroy (destroyObj) {\r\n    this.list = this.list.filter(obj =>\r\n      notEqual(obj, destroyObj)\r\n    )\r\n  }\r\n}\r\n\r\nexport {\r\n  createModel,\r\n  html,\r\n  assert,\r\n  checkNodeAvailability,\r\n  genId,\r\n  getId,\r\n  minId\r\n}\r\n","import ternaryOps from './ternaryOps'\r\n\r\nconst re = new RegExp(/(\\schecked=\")(.*?)(?=\")/g)\r\n\r\nlet tmpl = ''\r\nlet rep\r\nlet isTernary\r\nlet i\r\nlet len\r\nlet match\r\n\r\nexport default (string, obj) => {\r\n  const arrProps = string.match(/{{([^{}]+)}}/g)\r\n  tmpl = string\r\n  for (i = 0, len = arrProps.length; i < len; i++) {\r\n    rep = arrProps[i].replace(/{{([^{}]+)}}/g, '$1')\r\n    isTernary = ternaryOps.call(obj, rep)\r\n    if (isTernary) {\r\n      tmpl = tmpl.replace('{{' + rep + '}}', isTernary.value)\r\n    } else {\r\n      tmpl = tmpl.replace('{{' + rep + '}}', obj[rep])\r\n    }\r\n\r\n    match = tmpl.match(re)\r\n    if (match) {\r\n      if (match[0].length === 17) { tmpl = tmpl.replace(' checked=\"checked\"', ' checked') } else { tmpl = tmpl.replace(' checked=\"\"', '') }\r\n    }\r\n  }\r\n  return tmpl\r\n}\r\n","import templateParse from './templateParse/index'\r\nimport strInterpreter from './strInterpreter'\r\nimport morph from 'set-dom'\r\nimport { getId } from '../../utils'\r\n\r\nmorph.KEY = 'kdata-id'\r\n\r\nconst DELAY = 2.5\r\nlet el\r\n\r\nconst morpher = function () {\r\n  // let t = performance.now()\r\n  el = getId(this.el)\r\n  genElement.call(this)\r\n  // l(this.el, performance.now() - t)\r\n  if (el) {\r\n    this.IS_STUB ? morph(el, this.base.firstChild) : morph(el, this.base)\r\n  }\r\n  // l(this.el, 'morph', performance.now() - t)\r\n  // exec life-cycle componentDidUpdate\r\n  if (this.componentDidUpdate && typeof this.componentDidUpdate === 'function') {\r\n    this.componentDidUpdate()\r\n  }\r\n}\r\n\r\nlet timer = {}\r\n\r\nconst updateContext = function (fn, delay) {\r\n  timer[this.ID] = timer[this.ID] || null\r\n  clearTimeout(timer[this.ID])\r\n  timer[this.ID] = setTimeout(() => fn.call(this), delay)\r\n}\r\n\r\nconst nextState = function (i) {\r\n  let state\r\n  let value\r\n\r\n  if (i < stateList.length) {\r\n    state = stateList[i]\r\n    value = this[state]\r\n\r\n    // if value is undefined, likely has object notation we convert it to array\r\n    if (value === undefined) value = strInterpreter(state)\r\n\r\n    if (value && Array.isArray(value)) {\r\n      // using split object notation as base for state update\r\n      let inVal = this[value[0]][value[1]]\r\n      Object.defineProperty(this[value[0]], value[1], {\r\n        enumerable: false,\r\n        configurable: true,\r\n        get: function () {\r\n          return inVal\r\n        },\r\n        set: function (val) {\r\n          inVal = val\r\n          updateContext.call(this, morpher, DELAY)\r\n        }\r\n      })\r\n    } else {\r\n      // handle parent state update if the state is not an object\r\n      Object.defineProperty(this, state, {\r\n        enumerable: false,\r\n        configurable: true,\r\n        get: function () {\r\n          return value\r\n        },\r\n        set: function (val) {\r\n          value = val\r\n          updateContext.call(this, morpher, DELAY)\r\n        }\r\n      })\r\n    }\r\n    i++\r\n    nextState.call(this, i)\r\n  }\r\n}\r\n\r\nconst setState = function () {\r\n  nextState.call(this, 0)\r\n}\r\n\r\nlet stateList = []\r\n\r\nconst clearState = () => {\r\n  stateList = []\r\n}\r\n\r\nconst addState = state => {\r\n  if (stateList.indexOf(state) === -1) { stateList = stateList.concat(state) }\r\n}\r\n\r\nconst genElement = function () {\r\n  this.base = this.__pristineFragment__.cloneNode(true)\r\n  templateParse(this, addState, null, null, null, 'initial')\r\n  templateParse(this, addState, null, null, null, 'update')\r\n  templateParse(this, addState, null, null, null, 'event')\r\n}\r\n\r\nexport {\r\n  genElement,\r\n  addState,\r\n  setState,\r\n  clearState,\r\n  updateContext,\r\n  morpher\r\n}\r\n","/**\r\n * Keetjs v4.0.0 Alpha release: https://github.com/keetjs/keet\r\n * Minimalist view layer for the web\r\n *\r\n * <<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Keetjs >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\r\n *\r\n * Copyright 2018, Shahrul Nizam Selamat\r\n * Released under the MIT License.\r\n */\r\n\r\nimport parseStr from './src/components/parseStr'\r\nimport { updateContext, morpher } from './src/components/genElement'\r\nimport { genId, assert, html, createModel } from './utils'\r\nimport mount from './src/base/mount'\r\n\r\nwindow.l = console.log.bind(console)\r\nwindow.tr = console.trace.bind(console)\r\n/**\r\n * @description\r\n * The main constructor of Keet\r\n *\r\n * Basic Usage :-\r\n *\r\n *    const App extends Keet {}\r\n *    const app = new App()\r\n *    app.mount('hello world').link('app')\r\n *\r\n */\r\nclass Keet {\r\n  constructor () {\r\n    this.ID = Keet.indentity\r\n  }\r\n\r\n  // generate ID for the component\r\n  static get indentity () {\r\n    return genId()\r\n  }\r\n\r\n  mount (instance) {\r\n    return mount.call(this, instance)\r\n  }\r\n\r\n  link (id) {\r\n    // The target DOM where the rendering will took place.\r\n    if (!id) assert(id, 'No id is given as parameter.')\r\n    this.el = id\r\n    this.render()\r\n    return this\r\n  }\r\n\r\n  render (stub) {\r\n    // life-cycle method before rendering the component\r\n    if (this.componentWillMount && typeof this.componentWillMount === 'function') {\r\n      this.componentWillMount()\r\n    }\r\n\r\n    // Render this component to the target DOM\r\n    if (stub) {\r\n      this.IS_STUB = true\r\n    }\r\n    parseStr.call(this, stub)\r\n  }\r\n\r\n  callBatchPoolUpdate () {\r\n    // force component to update, if any state / non-state\r\n    // value changed DOM diffing will occur\r\n    updateContext.call(this, morpher, 1)\r\n  }\r\n\r\n  subscribe (fn) {\r\n    this.exec = fn\r\n  }\r\n\r\n  inform (model) {\r\n    this.exec && typeof this.exec === 'function' && this.exec(model)\r\n  }\r\n}\r\n\r\n// export default Keet\r\n\r\nexport {\r\n  Keet as default,\r\n  html,\r\n  createModel\r\n}\r\n","const store = (namespace, data) => {\r\n  if (arguments.length > 1) {\r\n    return window.localStorage.setItem(namespace, JSON.stringify(data))\r\n  } else {\r\n    let store = window.localStorage.getItem(namespace)\r\n    return store ? JSON.parse(store) : []\r\n  }\r\n}\r\n\r\nconst camelCase = s => s.charAt(0).toUpperCase() + s.slice(1)\r\n\r\nexport {\r\n  store,\r\n  camelCase\r\n}\r\n","import { camelCase } from './util'\r\nimport { createModel } from '../../keet'\r\n\r\nclass CreateFilterModel extends createModel {\r\n  switch (hash, obj) {\r\n    this.list = this.list.map(filter =>\r\n      filter.hash === hash ? ({ ...filter, ...obj }) : ({ ...filter, selected: false })\r\n    )\r\n  }\r\n}\r\n\r\nconst filterModel = new CreateFilterModel()\r\n\r\nArray.from(['all', 'active', 'completed']).map(page =>\r\n  filterModel.add({\r\n    hash: `#/${page}`,\r\n    name: camelCase(page),\r\n    selected: false\r\n  })\r\n)\r\n\r\nexport default filterModel\r\n","import { createModel } from '../../keet'\r\n\r\nclass CreateModel extends createModel {\r\n  clearCompleted () {\r\n    this.list = this.list.filter(todo => !todo.completed)\r\n  }\r\n  updateAll (checked) {\r\n    this.list = this.list.map(todo => ({ ...todo, completed: checked }))\r\n  }\r\n}\r\n\r\nconst todoModel = new CreateModel('filter')\r\n\r\nexport default todoModel\r\n","import Keet, { html } from '../../keet'\r\nimport todoModel from './todo-model'\r\n\r\nconst ENTER_KEY = 13\r\nconst ESC_KEY = 27\r\n\r\nclass App extends Keet {\r\n  el = 'todo-list'\r\n  todoModel = todoModel\r\n  constructor () {\r\n    super()\r\n    this.todoModel.subscribe((model, filterModel) =>\r\n      this.inform(model)\r\n    )\r\n  }\r\n  addTodo (newTodo) {\r\n    this.todoModel.add(newTodo)\r\n  }\r\n  evtTodo (obj, target) {\r\n    if (target.className === 'toggle') { \r\n      this.todoModel.update({ ...obj, completed: !obj.completed }) \r\n    } else if (target.className === 'destroy') { \r\n      this.todoModel.destroy(obj) \r\n    }\r\n  }\r\n  filterTodo (page) {\r\n    if (page === '#/all') {\r\n      this.todoModel.filter(null)\r\n    } else if (page === '#/active') {\r\n      this.todoModel.filter('completed', false)\r\n    } else if (page === '#/completed') {\r\n      this.todoModel.filter('completed', true)\r\n    }\r\n  }\r\n  saveEditing(obj , title){\r\n    title === '' ? this.todoModel.destroy(obj) : this.todoModel.update({ ...obj, title: title }) \r\n  }\r\n  editTodo(obj, target, node) {\r\n    if(target.nodeName !== 'LABEL') return\r\n    this.isEditing = true\r\n    node.classList.add('editing')\r\n    let input = node.querySelector('.edit')\r\n    this.currentValue = input.value\r\n    input.value = ''\r\n    input.focus()\r\n    input.value = this.currentValue\r\n  }\r\n  blurTodo(obj, target, node){\r\n    if(!this.isEditing) return\r\n    this.saveEditing(obj, target.value.trim())\r\n    node.classList.remove('editing')\r\n    this.isEditing = false\r\n  }\r\n  keyTodo(obj, target, node, e){\r\n    if (e.which === ENTER_KEY || e.which === ESC_KEY) {\r\n      node.classList.remove('editing')\r\n      this.isEditing = false\r\n      e.which === ENTER_KEY ? this.saveEditing(obj, target.value.trim()) : target.value = this.currentValue\r\n    }\r\n  }\r\n}\r\n\r\nconst todoList = new App()\r\n\r\ntodoList.mount(html`\r\n  <ul id=\"todo-list\" class=\"todo-list\" k-click=\"evtTodo()\" k-dblclick=\"editTodo()\" k-keydown=\"keyTodo()\" k-blur=\"blurTodo(useCapture)\" >\r\n    <!-- {{model:todoModel}} -->\r\n      <li class=\"{{completed?completed:''}}\">\r\n        <div class=\"view\">\r\n          <input class=\"toggle\" type=\"checkbox\" checked=\"{{completed?checked:''}}\">\r\n          <label>{{title}}</label>\r\n          <button class=\"destroy\"></button>\r\n        </div>\r\n        <input class=\"edit\" value=\"{{title}}\">\r\n      </li>\r\n    <!-- {{/model:todoModel}} -->\r\n  </ul>`)\r\n\r\nexport default todoList\r\n","import Keet, { html } from '../../keet'\r\nimport filterModel from './filter-model'\r\nimport todoList from './todo'\r\n\r\nclass App extends Keet {\r\n  el = 'filters'\r\n  filterModel = filterModel\r\n  componentWillMount () {\r\n    this.filterModel.subscribe(model => this.callBatchPoolUpdate())\r\n    if (window.location.hash === '') {\r\n      window.history.pushState({}, null, '#/all')\r\n    }\r\n  }\r\n  componentDidMount () {\r\n    this.updateUrl(window.location.hash)\r\n    window.onpopstate = () => this.updateUrl(window.location.hash)\r\n  }\r\n  updateUrl (hash) {\r\n    this.filterModel.switch(hash, { selected: true })\r\n    todoList.filterTodo(hash)\r\n  }\r\n}\r\n\r\nconst filterApp = new App()\r\n\r\nfilterApp.mount(html`\r\n  <ul id=\"filters\" class=\"filters\">\r\n    <!-- {{model:filterModel}} -->\r\n    <li id=\"{{name}}\" k-click=\"updateUrl({{hash}})\"><a class=\"{{selected?selected:''}}\" href=\"{{hash}}\">{{name}}</a></li>\r\n    <!-- {{/model:filterModel}} -->\r\n  </ul>`)\r\n\r\nexport default filterApp\r\n","import Keet, { html } from '../../keet'\r\nimport filterApp from './filter'\r\nimport todoList from './todo'\r\n\r\nconst ENTER_KEY = 13\r\n\r\nclass App extends Keet {\r\n  todoList = todoList\r\n  filter = filterApp\r\n  isChecked = false\r\n  count = 0\r\n  plural = ''\r\n  clearToggle = false\r\n  todoState = false\r\n\r\n  componentWillMount () {\r\n    todoList.subscribe(todos => {\r\n      let uncompleted = todos.filter(c => !c.completed)\r\n      let completed = todos.filter(c => c.completed)\r\n      this.clearToggle = !!completed.length\r\n      this.todoState = !!todos.length\r\n      this.plural = uncompleted.length === 1 ? '' : 's'\r\n      this.count = uncompleted.length\r\n      this.isChecked = !uncompleted.length\r\n    })\r\n  }\r\n\r\n  create (e) {\r\n    if (e.keyCode !== ENTER_KEY) return\r\n    let title = e.target.value.trim()\r\n    if (title) {\r\n      this.todoList.addTodo({ title, completed: false })\r\n      e.target.value = ''\r\n    }\r\n  }\r\n\r\n  completeAll () {\r\n    this.isChecked = !this.isChecked\r\n    this.todoList.todoModel.updateAll(this.isChecked)\r\n  }\r\n\r\n  clearCompleted () {\r\n    this.todoList.todoModel.clearCompleted()\r\n  }\r\n}\r\n\r\nconst app = new App()\r\n\r\napp.mount(html`\r\n  <section class=\"todoapp\">\r\n    <header id=\"header\">\r\n      <h1>todos</h1>\r\n      <input id=\"new-todo\" class=\"new-todo\" k-keydown=\"create()\" placeholder=\"What needs to be done?\" autofocus>\r\n    </header>\r\n    <!-- {{?todoState}} -->\r\n    <section class=\"main\">\r\n      <input id=\"toggle-all\" class=\"toggle-all\" type=\"checkbox\" checked=\"{{isChecked?checked:''}}\" k-click=\"completeAll()\">\r\n      <label for=\"toggle-all\">Mark all as complete</label>\r\n      <!-- {{component:todoList}} -->\r\n    </section>\r\n    <footer class=\"footer\">\r\n      <span class=\"todo-count\">\r\n        <strong>{{count}}</strong> item{{plural}} left\r\n      </span>\r\n      <!-- {{component:filter}} -->\r\n      <!-- {{?clearToggle}} -->\r\n      <button id=\"clear-completed\" k-click=\"clearCompleted()\" class=\"clear-completed\">Clear completed</button>\r\n      <!-- {{/clearToggle}} -->\r\n    </footer>\r\n    <!-- {{/todoState}} -->\r\n  </section>\r\n  <footer class=\"info\">\r\n    <p>Double-click to edit a todo</p>\r\n    <p>Created by <a href=\"https://github.com/syarul\">Shahrul Nizam Selamat</a></p>\r\n    <p>Part of <a href=\"http://todomvc.com\">TodoMVC</a></p>\r\n  </footer>`).link('todo')\r\n"]}